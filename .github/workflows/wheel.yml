name: "Create Python Wheels"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # release:
  #   types: [created]

env:
  STAN_BACKEND: "PYSTAN,CMDSTANPY"
  # Env vars, required because CIBW may build inside a Docker container
  CIBW_ENVIRONMENT: STAN_BACKEND="PYSTAN,CMDSTANPY"
  # Python versions for cibuildwheel
  CIBW_BUILD: "cp38-*"
  # Architectures for cibuildwheel
  CIBW_ARCHS: "native"
  # Use pypa/build as the build frontend
  CIBW_BUILD_FRONTEND: "build"
  CMDSTAN_VERSION: "2.26.1"

jobs:
  make-wheels-macos-linux:
    name: ${{ matrix.python-version }}-${{ matrix.architecture }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - "macos-latest"
          - "ubuntu-latest"
        python-version:
          - "3.8"
        architecture:
          - x64
        include:
          - os: "macos-latest"
            pip-cache-path: "~/Library/Caches/pip"
          - os: "ubuntu-latest"
            pip-cache-path: "~/.cache/pip"

      fail-fast: false

    steps:
      - name: "Get OS version (Linux)"
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "OS_VERSION=\"`lsb release -sr`\"" >> $GITHUB_ENV

      - name: "Get OS version (macOS)"
        if: startsWith(runner.os, 'macOS')
        run: |
          echo "OS_VERSION=\"`sw_vers -productVersion`\"" >> $GITHUB_ENV

      - name: "Checkout repo"
        uses: actions/checkout@v2

      - name: "Set up Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: "Restore pip cache"
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ matrix.pip-cache-path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Install cibuildwheel"
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel build

      - name: "Restore cmdstan cache"
        id: cache-cmdstan
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan/
          key: ${{ runner.os }}-${{ env.OS_VERSION }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: "Download and build cmdstan"
        if: steps.cache-cmdstan.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/stan-dev/cmdstan/releases/download/v${{ env.CMDSTAN_VERSION }}/cmdstan-${{ env.CMDSTAN_VERSION }}.tar.gz -O /tmp/cmdstan.tar.gz > /dev/null
          mkdir ~/.cmdstan
          tar -xvf /tmp/cmdstan.tar.gz -C ~/.cmdstan > /dev/null
          make -C ~/.cmdstan/cmdstan-2.26.1/ clean-all > /dev/null
          make -C ~/.cmdstan/cmdstan-2.26.1/ build > /dev/null

      - name: "Create wheel"
        run: |
          cd python && python -m cibuildwheel --output-dir wheelhouse

      - name: "Upload wheel as artifact"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-wheel
          path: "./**/*.whl"
