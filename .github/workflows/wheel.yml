name: "Create Python Wheels"

on:
  release:
    types: [ created ]
  workflow_dispatch: {}


env:
  STAN_BACKEND: "CMDSTANPY"

jobs:
  make-wheel-windows:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest"]
      fail-fast: false

    steps:
      - name: "Setup environment variables (Windows)"
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
          $os_version = (Get-CimInstance Win32_OperatingSystem).version
          Echo "OS_VERSION=$os_version" >> $env:GITHUB_ENV
          Echo "PIP_DEFAULT_CACHE=$HOME/pip/cache" >> $env:GITHUB_ENV
          Echo "DEFAULT_HOME=$HOME" >> $env:GITHUB_ENV

      - name: "Checkout repo"
        uses: actions/checkout@v3

      - name: "Restore pip cache"
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_DEFAULT_CACHE }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/python/requirements.txt') }}-v1
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Install pip"
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel build delvewheel

      - name: "Restore RTools40"
        id: cache-rtools
        uses: actions/cache@v2
        with:
          path: C:/rtools40
          key: ${{ runner.os }}-${{ env.OS_VERSION }}-rtools-v1

      - name: "Build wheel"
        run: |
          cd python && python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT: >
            STAN_BACKEND="${{ env.STAN_BACKEND }}"
            PIP_CACHE_DIR="${{ env.PIP_DEFAULT_CACHE }}"
          CIBW_BUILD: cp37-* cp38-* cp39-* cp310-*
          CIBW_ARCHS: native
          CIBW_BUILD_FRONTEND: build
          # CIBW_REPAIR_WHEEL_COMMAND: delvewheel repair -w {dest_dir} {wheel}
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest --pyargs prophet

      - name: "Upload wheel as artifact"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-wheel
          path: "./**/*.whl"

  make-wheels-macos-linux:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["macos-latest", "ubuntu-latest"]
      fail-fast: false

    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v3

      - name: "Build wheels"
        uses: pypa/cibuildwheel@v2.6.0
        with:
          package-dir: python
        env:
          CIBW_ENVIRONMENT: >
            STAN_BACKEND="${{ env.STAN_BACKEND }}"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD: cp37-* cp38-* cp39-* cp310-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: native
          CIBW_BUILD_FRONTEND: build
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest --pyargs prophet

      - name: "Upload wheel as artifact"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-wheel
          path: "./**/*.whl"
